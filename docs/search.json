[
  {
    "objectID": "rates.html",
    "href": "rates.html",
    "title": "Theoretical QM Rates vs. Experimental Heuristic Rates",
    "section": "",
    "text": "KIMMDY can be used to sample competing reactions as long as proxies for comparable reaction rates are known. Let us consider the following two reactions that can occur in the backbone of a protein:\n\nHomolysis of a bond\nHydrolysis of a bond\n\nThe KIMMDY-plugin version of earlier work on collagen bond rupture by Rennekamp et al. (2020) shipped with KIMMDY in the optional kimmdy-reactons package can be used to simulate force-dependent bond rupture reactions.\n\\[\nk=A e^{-\\Delta E / k_B T}\n\\tag{1}\\]\nRennekamp et al. (2020) ultimately used an empirical attempt frequency of \\(A=0.23 ps^{-1}\\) (after starting with the theoretical maximal attempt frequency of \\(A=6.25 ps^{-1}\\)).\nFor hydrolysis, we take a a baseline energy barrier scaled by the force-dependence of the reaction unveiled by Pill et al. (2019). The observed attempt frequency of the hydrolysis reaction is further scaled by the solvent accessible surface area (SASA) of the peptide bond, normalized to the maximum SASA of a peptide bond in a lonely glycine-glycine dipeptide (\\(=140 A^2\\)).\nPill et al. (2019) suggest that the rate of the hydrolysis reaction is govered by two enegy barriers, where T1 is almost insensitive to mechanical activation, but only becomes rate-determining after the mechanically sensitive T2 is lowered by force.\nTS1:\n\n80 kJ/mol at 0nN\n77 kJ/mol at 1.8nN\nE = 80 - 1.67 * F\n\nTS2:\n\n92.5 kJ/mol at 0nN\n46 kJ/mol at 1.8 nN\nE = 92.5 - 25.83 * F\n\nThis translates to:\ncritical_force = 0.7 # nN\nif force &lt; critical_force\n  # low force regime, TS2 is rate-determining\n  E_barrier = 92.5 - 25.83 * force\nelse:\n  # high force regime, TS1 is rate-determining\n  E_barrier = 80 - 1.67 * force\nBut the theortical rates don’t quite match the experimental rates.\n\nfrom plotnine import * # pyright: ignore\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom kimmdy_hydrolysis.rates import high_force_log_rate, theoretical_reaction_rate_per_s, experimental_reaction_rate_per_s, low_force_log_rate\nimport pandas as pd\nimport os\n\nroot = os.getcwd()\n\ntheme_set(theme_minimal())\n\n&lt;plotnine.themes.theme_minimal.theme_minimal at 0x7782a2d13310&gt;\n\n\nInstead of calculating rates from the theoretical energies we can fit the rates to the experimental data directly.\nGet the data from the SI and add predicted rates from hydrolysis plugin function:\n\ndf = pd.read_csv(\"./assets/afm-rates.csv\")\ndf = df.melt(id_vars=[\"f\"], var_name=\"t\", value_name=\"rate\")\ndf[\"t\"] = pd.to_numeric(df[\"t\"], errors=\"coerce\")\ndf = df.dropna(subset=[\"rate\"])\ndf[\"log_k\"] = np.log(df[\"rate\"])\ndf[\"is_low_f\"] = df[\"f\"] &lt;= 0.7\ndf['plugin_k'] = [experimental_reaction_rate_per_s(force=f, temperature=t) for f, t in zip(df[\"f\"], df[\"t\"])]\ndf['plugin_theo_k'] = [theoretical_reaction_rate_per_s(force=f, temperature=t) for f, t in zip(df[\"f\"], df[\"t\"])]\ndf['plugin_high_log_k'] = [high_force_log_rate(force=f, temperature=t) for f, t in zip(df[\"f\"], df[\"t\"])]\ndf['plugin_low_log_k'] = [low_force_log_rate(force=f) for f, t in zip(df[\"f\"], df[\"t\"])]\ndf['plugin_log_k'] = np.log(df['plugin_k'])\n\nFit model log(k) ~ t + f:\n\nimport statsmodels.api as sm\n\nmodel = sm.OLS.from_formula(\"log_k ~ t + f\", data=df.query(\"not is_low_f\"))\nmodel.fit().summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nlog_k\nR-squared:\n0.944\n\n\nModel:\nOLS\nAdj. R-squared:\n0.939\n\n\nMethod:\nLeast Squares\nF-statistic:\n187.0\n\n\nDate:\nThu, 12 Jun 2025\nProb (F-statistic):\n1.56e-14\n\n\nTime:\n14:32:26\nLog-Likelihood:\n14.858\n\n\nNo. Observations:\n25\nAIC:\n-23.72\n\n\nDf Residuals:\n22\nBIC:\n-20.06\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-20.3430\n1.946\n-10.453\n0.000\n-24.379\n-16.307\n\n\nt\n0.0706\n0.006\n10.940\n0.000\n0.057\n0.084\n\n\nf\n1.6052\n0.101\n15.946\n0.000\n1.396\n1.814\n\n\n\n\n\n\n\n\nOmnibus:\n3.044\nDurbin-Watson:\n2.069\n\n\nProb(Omnibus):\n0.218\nJarque-Bera (JB):\n2.094\n\n\nSkew:\n0.523\nProb(JB):\n0.351\n\n\nKurtosis:\n2.044\nCond. No.\n2.06e+04\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 2.06e+04. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\nmodel_294k = sm.OLS.from_formula(\"log_k ~ f\", data=df.query(\"not is_low_f & t == 294.15\"))\nmodel_294k.fit().summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nlog_k\nR-squared:\n0.981\n\n\nModel:\nOLS\nAdj. R-squared:\n0.975\n\n\nMethod:\nLeast Squares\nF-statistic:\n159.0\n\n\nDate:\nThu, 12 Jun 2025\nProb (F-statistic):\n0.00108\n\n\nTime:\n14:32:26\nLog-Likelihood:\n6.8454\n\n\nNo. Observations:\n5\nAIC:\n-9.691\n\n\nDf Residuals:\n3\nBIC:\n-10.47\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n0.4216\n0.155\n2.722\n0.072\n-0.071\n0.914\n\n\nf\n1.5839\n0.126\n12.608\n0.001\n1.184\n1.984\n\n\n\n\n\n\n\n\nOmnibus:\nnan\nDurbin-Watson:\n2.105\n\n\nProb(Omnibus):\nnan\nJarque-Bera (JB):\n0.617\n\n\nSkew:\n0.204\nProb(JB):\n0.734\n\n\nKurtosis:\n1.328\nCond. No.\n8.80\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nadd model predictions:\n\ndf['model_high_log_k'] = model.fit().predict(df.query(\"not is_low_f\"))\ndf['model_294k_log_k'] = model_294k.fit().predict(df.query(\"not is_low_f & t == 294.15\"))\n\nArrhenius plot:\n\np = (\n  ggplot(df.query('not is_low_f'), aes(x='t', y='log_k', color='factor(f)')) +\n  geom_smooth(method='lm', se=False) +\n  geom_point(size=5) +\n  geom_point(aes(y='plugin_high_log_k'), size=5, shape='x') +\n  geom_point(aes(y='model_high_log_k'), size=5, shape='.') +\n  geom_point(aes(y='model_294k_log_k'), size=5, shape='.', color='red') +\n  scale_x_reverse() +\n  guides(color=guide_legend(reverse=True)) +\n  labs(\n    y='log(k) [1/s]',\n    x='Temperature [K]',\n    color='Force [nN]'\n  )\n)\np.show()\n\n\n\n\n\n\n\n\n\np = (\n  ggplot(df.query('not is_low_f & t == 294.15'), aes(x='f', y='log_k')) +\n  geom_smooth(method='lm', se=False) +\n  geom_point(size=5) +\n  geom_point(aes(y='plugin_high_log_k'), size=5, shape='x') +\n  geom_point(aes(y='model_high_log_k'), size=5, shape='.') +\n  geom_point(aes(y='model_294k_log_k'), size=5, shape='.', color='red') +\n  scale_x_reverse() +\n  guides(color=guide_legend(reverse=True)) +\n  labs(\n    x='Force [nN]',\n    y='log(k) [1/s]',\n  )\n)\np.show()\n\n\n\n\n\n\n\n\n\np = (\n  ggplot(df, aes(x='f', y='rate', color='factor(t)')) +\n  # geom_smooth(method='lm', se=False) +\n  geom_point(size=5, color='blue') +\n  # geom_point(aes(y='plugin_log_k'), size=5, shape='x') +\n  geom_point(aes(y='plugin_theo_k'), size=5, shape='.', color='black') +\n  scale_x_reverse() +\n  scale_y_log10() +\n  guides(color=guide_legend(reverse=True)) +\n  labs(\n    y='log(k) [1/s]',\n    x='Force [nN]',\n    color='Temperature [K]'\n  )\n)\np.show()\n\n\n\n\n\n\n\n\n\n\n\n\n Back to topReferences\n\nPill, Michael F., Allan L. L. East, Dominik Marx, Martin K. Beyer, and Hauke Clausen-Schaumann. 2019. “Mechanical Activation Drastically Accelerates Amide Bond Hydrolysis, Matching Enzyme Activity.” https://doi.org/10.1002/anie.201902752.\n\n\nRennekamp, Benedikt, Fabian Kutzki, Agnieszka Obarska-Kosinska, Christopher Zapp, and Frauke Gräter. 2020. “Hybrid Kinetic Monte Carlo/Molecular Dynamics Simulations of Bond Scissions in Proteins.” https://doi.org/10.1021/acs.jctc.9b00786."
  },
  {
    "objectID": "_reference/kimmdy_hydrolysis.utils.html",
    "href": "_reference/kimmdy_hydrolysis.utils.html",
    "title": "kimmdy_hydrolysis.utils",
    "section": "",
    "text": "kimmdy_hydrolysis.utils\nutils\n\n\n\n\n Back to top",
    "crumbs": [
      "Reference",
      "Hydrolysis",
      "kimmdy_hydrolysis.utils"
    ]
  },
  {
    "objectID": "_reference/kimmdy_hydrolysis.rates.html",
    "href": "_reference/kimmdy_hydrolysis.rates.html",
    "title": "kimmdy_hydrolysis.rates",
    "section": "",
    "text": "rates\n\n\n\n\n\nName\nDescription\n\n\n\n\ntheoretical_reaction_rate_per_s\nCalculate reaction rate in 1/s\n\n\n\n\n\nrates.theoretical_reaction_rate_per_s(\n    force=0,\n    ts1=80,\n    ts2=92,\n    ts1_force_scaling=1.67,\n    ts2_force_scaling=25.83,\n    A=100000000000.0,\n    temperature=300,\n    ph_value=7.4,\n)\nCalculate reaction rate in 1/s\nsee SI of pill et al. 2019 http://dx.doi.org/10.1002/anie.201902752",
    "crumbs": [
      "Reference",
      "Hydrolysis",
      "kimmdy_hydrolysis.rates"
    ]
  },
  {
    "objectID": "_reference/kimmdy_hydrolysis.rates.html#functions",
    "href": "_reference/kimmdy_hydrolysis.rates.html#functions",
    "title": "kimmdy_hydrolysis.rates",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ntheoretical_reaction_rate_per_s\nCalculate reaction rate in 1/s\n\n\n\n\n\nrates.theoretical_reaction_rate_per_s(\n    force=0,\n    ts1=80,\n    ts2=92,\n    ts1_force_scaling=1.67,\n    ts2_force_scaling=25.83,\n    A=100000000000.0,\n    temperature=300,\n    ph_value=7.4,\n)\nCalculate reaction rate in 1/s\nsee SI of pill et al. 2019 http://dx.doi.org/10.1002/anie.201902752",
    "crumbs": [
      "Reference",
      "Hydrolysis",
      "kimmdy_hydrolysis.rates"
    ]
  },
  {
    "objectID": "_reference/index.html",
    "href": "_reference/index.html",
    "title": "References",
    "section": "",
    "text": "kimmdy_hydrolysis.reaction\n\n\n\nkimmdy_hydrolysis.rates\n\n\n\nkimmdy_hydrolysis.minisasa\nInspired by SASAAnalysis: https://github.com/pegerto/mdakit_sasa\n\n\nkimmdy_hydrolysis.utils\n\n\n\nkimmdy_hydrolysis.constants",
    "crumbs": [
      "Reference",
      "References"
    ]
  },
  {
    "objectID": "_reference/index.html#hydrolysis",
    "href": "_reference/index.html#hydrolysis",
    "title": "References",
    "section": "",
    "text": "kimmdy_hydrolysis.reaction\n\n\n\nkimmdy_hydrolysis.rates\n\n\n\nkimmdy_hydrolysis.minisasa\nInspired by SASAAnalysis: https://github.com/pegerto/mdakit_sasa\n\n\nkimmdy_hydrolysis.utils\n\n\n\nkimmdy_hydrolysis.constants",
    "crumbs": [
      "Reference",
      "References"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "kimmdy-hydrolysis",
    "section": "",
    "text": "kimmdy-hydrolysis\nA reaction plugin for KIMMDY that hydrolyses peptide bonds.\nDocumentation: https://graeter-group.github.io/kimmdy-hydrolysis/\n\n\n\n\n Back to top"
  },
  {
    "objectID": "_reference/kimmdy_hydrolysis.minisasa.html",
    "href": "_reference/kimmdy_hydrolysis.minisasa.html",
    "title": "kimmdy_hydrolysis.minisasa",
    "section": "",
    "text": "minisasa\nInspired by SASAAnalysis: https://github.com/pegerto/mdakit_sasa\nto get multiple SASA’s (for different atoms) in one go and not have to rebuild the strucuture every time.\n\n\n\n\n\nName\nDescription\n\n\n\n\nMiniSasa\nA class to calculate SASA for a given MDAnalysis Universe.\n\n\n\n\n\nminisasa.MiniSasa(\n    u,\n    mda_selection='not resname SOL and not resname CL and not resname NA',\n)\nA class to calculate SASA for a given MDAnalysis Universe. This class allows for the calculation of SASA for multiple atoms in a single structure without the need to rebuild the structure each time. It uses the FreeSASA library for the calculations.\n\n\n\n\n\nName\nDescription\n\n\n\n\nupdate_structure\nFreeSasa structure accepts PDBS if not available requires to reconstruct the structure using addAtom\n\n\n\n\n\nminisasa.MiniSasa.update_structure()\nFreeSasa structure accepts PDBS if not available requires to reconstruct the structure using addAtom\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_baseline_sasa\nCalculate the SASA of a C in the peptide bond of a capped GLY-GLY didpeptide\n\n\n\n\n\nminisasa.get_baseline_sasa()\nCalculate the SASA of a C in the peptide bond of a capped GLY-GLY didpeptide",
    "crumbs": [
      "Reference",
      "Hydrolysis",
      "kimmdy_hydrolysis.minisasa"
    ]
  },
  {
    "objectID": "_reference/kimmdy_hydrolysis.minisasa.html#classes",
    "href": "_reference/kimmdy_hydrolysis.minisasa.html#classes",
    "title": "kimmdy_hydrolysis.minisasa",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nMiniSasa\nA class to calculate SASA for a given MDAnalysis Universe.\n\n\n\n\n\nminisasa.MiniSasa(\n    u,\n    mda_selection='not resname SOL and not resname CL and not resname NA',\n)\nA class to calculate SASA for a given MDAnalysis Universe. This class allows for the calculation of SASA for multiple atoms in a single structure without the need to rebuild the structure each time. It uses the FreeSASA library for the calculations.\n\n\n\n\n\nName\nDescription\n\n\n\n\nupdate_structure\nFreeSasa structure accepts PDBS if not available requires to reconstruct the structure using addAtom\n\n\n\n\n\nminisasa.MiniSasa.update_structure()\nFreeSasa structure accepts PDBS if not available requires to reconstruct the structure using addAtom",
    "crumbs": [
      "Reference",
      "Hydrolysis",
      "kimmdy_hydrolysis.minisasa"
    ]
  },
  {
    "objectID": "_reference/kimmdy_hydrolysis.minisasa.html#functions",
    "href": "_reference/kimmdy_hydrolysis.minisasa.html#functions",
    "title": "kimmdy_hydrolysis.minisasa",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_baseline_sasa\nCalculate the SASA of a C in the peptide bond of a capped GLY-GLY didpeptide\n\n\n\n\n\nminisasa.get_baseline_sasa()\nCalculate the SASA of a C in the peptide bond of a capped GLY-GLY didpeptide",
    "crumbs": [
      "Reference",
      "Hydrolysis",
      "kimmdy_hydrolysis.minisasa"
    ]
  },
  {
    "objectID": "_reference/kimmdy_hydrolysis.constants.html",
    "href": "_reference/kimmdy_hydrolysis.constants.html",
    "title": "kimmdy_hydrolysis.constants",
    "section": "",
    "text": "kimmdy_hydrolysis.constants\nconstants\n\n\n\n\n Back to top",
    "crumbs": [
      "Reference",
      "Hydrolysis",
      "kimmdy_hydrolysis.constants"
    ]
  },
  {
    "objectID": "_reference/kimmdy_hydrolysis.reaction.html",
    "href": "_reference/kimmdy_hydrolysis.reaction.html",
    "title": "kimmdy_hydrolysis.reaction",
    "section": "",
    "text": "reaction\n\n\n\n\n\nName\nDescription\n\n\n\n\nHydrolysisReaction\nHydrolyses peptide bonds of the backbone.\n\n\n\n\n\nreaction.HydrolysisReaction()\nHydrolyses peptide bonds of the backbone.\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_steps_for_id_c_at_t\nGet the steps for a given bond at a given time.\n\n\ntimes_to_timespans\nTransforms an array of times into a list of time intervals\n\n\n\n\n\nreaction.HydrolysisReaction.get_steps_for_id_c_at_t(key, ttime)\nGet the steps for a given bond at a given time.\nThe bond is identified by the atom id of the C atom.\n\n\n\nreaction.HydrolysisReaction.times_to_timespans(times)\nTransforms an array of times into a list of time intervals times are an array of times at which the SASA was calculated timespans are the time intervals between those times as tuples of (start, end)",
    "crumbs": [
      "Reference",
      "Hydrolysis",
      "kimmdy_hydrolysis.reaction"
    ]
  },
  {
    "objectID": "_reference/kimmdy_hydrolysis.reaction.html#classes",
    "href": "_reference/kimmdy_hydrolysis.reaction.html#classes",
    "title": "kimmdy_hydrolysis.reaction",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nHydrolysisReaction\nHydrolyses peptide bonds of the backbone.\n\n\n\n\n\nreaction.HydrolysisReaction()\nHydrolyses peptide bonds of the backbone.\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_steps_for_id_c_at_t\nGet the steps for a given bond at a given time.\n\n\ntimes_to_timespans\nTransforms an array of times into a list of time intervals\n\n\n\n\n\nreaction.HydrolysisReaction.get_steps_for_id_c_at_t(key, ttime)\nGet the steps for a given bond at a given time.\nThe bond is identified by the atom id of the C atom.\n\n\n\nreaction.HydrolysisReaction.times_to_timespans(times)\nTransforms an array of times into a list of time intervals times are an array of times at which the SASA was calculated timespans are the time intervals between those times as tuples of (start, end)",
    "crumbs": [
      "Reference",
      "Hydrolysis",
      "kimmdy_hydrolysis.reaction"
    ]
  },
  {
    "objectID": "config.html",
    "href": "config.html",
    "title": "KIMMDY Hydrolysis Options",
    "section": "",
    "text": "For all KIMMDY options see here.\n\ncutoff\nCutoff distance [A] for the reaction. Water within this distance from the peptide bond will be considered for hydrolysis.\nType: float\nDefault: 6\n\n\nstep\nStepsize in frames for calculating the SASA (solvent accessible surface area) of each peptide bond and thus the reaction rate.\nType: int\nDefault: 1\n\n\nkmc\nKMC algorithm for this reaction.\nType: str\nOptions: [‘rfkmc’, ‘frm’, ‘extrande’, ‘extrande_mod’]\nDefault: rfkmc\n\n\nph_value\npH value of the system. The default value is 7.4. The rate of the reaction is scaled by the pH value. More basic conditions will increase the rate of the reaction.\nType: float\nDefault: 7.4\n\n\nmax_sasa\nMaximum expeted solvent accessiblity of a C in a peptide bond. The reaction rate will be scaled based on the percent decrease of the SASA from this value. The default value is 3.97 A^2, which is the SASA of the C of the peptide bond in a simple glycine-glycine peptide.\nType: float\nDefault: 3.97\n\n\nexternal_force\nExternal force applied in nN. Note: 603 gromacs (kJ/mol/nm^2) units per strand are 1nN. The default (-1) means to calculate a force per bond based on bond extension using a morse potential. This needs PLUMED\nType: float\nDefault: -1\n\n\neq_bond_lengths\nCSV file of equilibirum bond lengths for each peptide bond in the system. Colums: i,j,bond_length. The default is the empty string, in which case no equilibirum length correction is applied.\nType: str\n\n\ntemperature\nTemperature\nType: float\nDefault: 310\n\n\ntheoretical_rates\nFor setting values in the arrhenius equation with rates based on theoretical energy calculations by Pill et al.\n\n\ntheoretical_rates.use\nUse theoretical rates instead of empirical rates. The default is false.\nType: bool\nDefault: False\n\n\ntheoretical_rates.empirical_attempt_frequency\nThe attempt frequency in 1/ps with the default based on experiments by Pill et al.\nType: float\nDefault: 0.1\n\n\ntheoretical_rates.ts1\nEnergy barrier at 0 external force for TS1 of the hydrolysis reaction. [kJ/mol]\nType: float\nDefault: 80\n\n\ntheoretical_rates.ts2\nEnergy barrier at 0 external force for TS2 of the hydrolysis reaction.\nType: float\nDefault: 92\n\n\ntheoretical_rates.ts1_force_scaling\nForce scaling factor for TS1 in kJ/mol/nN\nType: float\nDefault: 1.67\n\n\ntheoretical_rates.ts2_force_scaling\nForce scaling factor for TS2 in kJ/mol/nN\nType: float\nDefault: 25.83\n\n\ntheoretical_rates.critical_force\nForce in nN at which (the activation energy of) TS2 becomes lower than TS1 and this TS1 becomes the rate limiting step.\nType: float\nDefault: 0.7\n\n\n\n\n Back to top"
  }
]